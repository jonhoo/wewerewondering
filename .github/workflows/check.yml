# This workflow runs whenever a PR is opened or updated, or a commit is pushed to main. It runs
# several checks:
# - fmt: checks that the code is formatted according to rustfmt
# - clippy: checks that the code does not contain any clippy warnings
# - doc: checks that the code can be documented without errors
# - hack: check combinations of feature flags
# - msrv: check that the msrv specified in the crate is correct
permissions:
  contents: read
# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  push:
    branches: [main]
  pull_request:
    paths:
      - 'server/**'
      - '.github/workflows/check.yml'
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR. Ensures that
# we don't waste CI time, and returns results quicker https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: server / check
jobs:
  fmt:
    runs-on: ubuntu-latest
    name: stable / fmt
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: cargo fmt --check
        run: cargo fmt --check
  in_release_mode_on_arm:
    runs-on: ubuntu-latest
    name: stable / release-arm
    defaults:
      run:
        working-directory: ./server
    steps:
      - name: Install aarch64-gcc
        run: sudo apt-get install gcc-aarch64-linux-gnu
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: rustup target add aarch64-unknown-linux-gnu
        run: rustup target add aarch64-unknown-linux-gnu
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: cargo check --release --target aarch64-unknown-linux-gnu
        run: cargo check --release --target aarch64-unknown-linux-gnu
  clippy:
    runs-on: ubuntu-latest
    name: ${{ matrix.toolchain }} / clippy
    permissions:
      contents: read
      checks: write
    defaults:
      run:
        working-directory: ./server
    strategy:
      fail-fast: false
      matrix:
        # Get early warning of new lints which are regularly introduced in beta channels.
        toolchain: [stable, beta]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
      - name: cargo clippy
        uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-check'
          github_token: ${{ secrets.GITHUB_TOKEN }}
